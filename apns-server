#!/bin/bash

# app_apns server - Startup script for app_apns server
# chkconfig: 35 90 10
# description: app_apns server.
# processname: app_apns
# config: /etc/mx_apps/app_apns
# pidfile: /var/run/app_apns

### BEGIN INIT INFO
# Provides: app_apns
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop apns
### END INIT INFO


. /etc/rc.d/init.d/functions

SERVER_NAME="Apns-Server"
SERVER_CMD="/root/.pyenv/versions/3.4.3/bin/python"
SERVER_SCP="app_apns"
SERVER_PTH="/opt/webapps/${SERVER_SCP}"
SERVER_OPT="${SERVER_SCP}.py"
SERVER_OPT_START="${SERVER_OPT} --cmd=start --conf="
SERVER_OPT_STOP="${SERVER_OPT} --cmd=stop --conf="
SERVER_TMP="/tmp/${SERVER_SCP}.tmp"
SERVER_CONFPATH="/etc/mx_apps/${SERVER_SCP}/${SERVER_SCP}_is*"

die()
{
  echo $1
  exit 1
}

usage() 
{
  echo "Usage: $0 {start|stop|restart|status}"
  exit 0
}

[ -f ${SERVER_CMD} ] || die "Python 3.4 does not exist"
[ -d ${SERVER_PTH} ] || die "${SERVER_PTH} does not exist"

start_service()
{
  ls ${SERVER_CONFPATH} > ${SERVER_TMP}

  while read line;
  do
    if [ -f ${line} ]; then
      pidfile_name=`cat ${line}  | grep pidfile | awk -F '=' '{print $2}'`
      pidfile=${pidfile_name//\"/}
      if [ ! -f ${pidfile} ]; then
        cd ${SERVER_PTH};
        rs=`$SERVER_CMD ${SERVER_OPT_START}${line}`
        cd - >/dev/null 2>&1
      fi
    fi
  done < ${SERVER_TMP}
}

stop_service()
{
  ls ${SERVER_CONFPATH} > ${SERVER_TMP}

  while read line;
  do
    if [ -f ${line} ]; then
      pidfile_name=`cat ${line}  | grep pidfile | awk -F '=' '{print $2}'`
      pidfile=${pidfile_name//\"/}
      if [ -f ${pidfile} ]; then
        cd ${SERVER_PTH}
        rs=`$SERVER_CMD ${SERVER_OPT_STOP}${line}`
        cd - >/dev/null 2>&1
        usleep 10000

        if [ -f ${pidfile} ]; then
          killproc -p $pidfile -d 300 -TERM $SERVER_CMD
          RETVAL=$?
          [ $RETVAL -eq 0 ] && rm -f ${pidfile}
        fi
      fi
    fi
  done < ${SERVER_TMP}
}

status_service()
{
  ls ${SERVER_CONFPATH} > ${SERVER_TMP}
  while read line;
  do
    pidfile_name=`cat ${line}  | grep pidfile | awk -F '=' '{print $2}'`
    pidfile=${pidfile_name//\"/} 
    server_ins=${line##*/}
    if [ -f $pidfile ]; then
      echo "${server_ins/.conf/} is running"
    else
      echo "${server_ins/.conf/} is not running"
    fi
  done < ${SERVER_TMP}
}

if [ $# != 1 ]; then
  usage
fi

start()
{
  echo $"Starting ${SERVER_NAME}"
  start_service
  echo $"${SERVER_NAME} started"
}

stop()
{
  echo $"Stopping ${SERVER_NAME}"
  stop_service
  echo $"${SERVER_NAME} stopped"
}

status()
{
  status_service
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status
    ;;
  * )
    usage
    ;;
esac

